# # for (cost_index in 1:10) {
print(rbind(fpsn.models$allCost[,30], mycost[,30]))
# # }
#dynamic to find all the position for each segments
enum.choose <- function(x, k) {
if(k > length(x)) stop('k > length(x)')
if(choose(length(x), k)==1){
list(as.vector(combn(x, k)))
} else {
cbn <- combn(x, k)
lapply(seq(ncol(cbn)), function(i) cbn[,i])
}
}
#find all possible combination for k segments
all_index <- function(x,k){
all_index.list <- list()
all_possible <- enum.choose(x,k)
for (i in 1:length(all_possible)) {
if(all_possible[[i]][1] == 1){
if(all_possible[[i]][length(all_possible[[i]])] != length(x)){
all_index.list[i] <- all_possible[i]
all_index.list[[i]][length(all_possible[[i]])+1] <- length(x)
}
}
else{
break
}
}
return(all_index.list)
}
#@data is a  vector of numeric data
#@N is a  maximum number of segments parameter (positive integer)
DYNPROG <- function(data,N){
#initializing matrix cost_mat, with nrow = max segments, ncol = number of data points.
cost_mat <- matrix(1, nrow = N, ncol = length(data))
#Begin by filling in the first row with the optimal cost values for the models with one segment
Q1 <- cumsum(data^2)
S1 <- cumsum(data)
cost_mat[1,] <- Q1- S1^2/seq_along(data)
x <- seq(1,length(data),1)
for (row_index in 2:N) {
all_index.list <- all_index(x, row_index)
#remove all the null value in the list
all_index.list <- Filter(Negate(function(x) is.null(unlist(x))), all_index.list)
best_cost_mat = NULL
for(seg_index in 1: length(all_index.list)){
t <- 0
for (position in 1:row_index) {
left <- all_index.list[[seg_index]][position]
right <- all_index.list[[seg_index]][position+1]
if(right == length(data)){
right <- all_index.list[[seg_index]][position+1]
}
else{
right <- all_index.list[[seg_index]][position+1]-1
}
data.segments <- data[left:right]
Q <- cumsum(data.segments^2)
S <- cumsum(data.segments)
cost_mat[row_index, left:right] <- abs(Q- S^2/seq_along(data.segments))
# cost_mat[row_index, left:right] <- sum((mean(data.segments)-data.segments)^2)
if(row_index > 1) {
cost_mat[row_index, left:right] <- cost_mat[row_index -1, left:right] - length(data.segments)^2*cost_mat[row_index, left:right]*(row_index-1)
}
}
}
if(is.null(best_cost_mat)){
best_cost_mat <- cost_mat[row_index, ]
}
if(mean(best_cost_mat) > mean(cost_mat[row_index, ])){
best_cost_mat <- cost_mat[row_index, ]
}
cost_mat[row_index, ] <- best_cost_mat
}
# for (r in 2:N) {
#   cost_mat[r,] <- abs(cost_mat[r-1,]-cost_mat[r,]*(length(data)/r))
# }
return(cost_mat)
}
d <- sdt1$logratio[1:30]
fpsn.models <- jointseg::Fpsn(d, 5)
mycost <- DYNPROG(d,5)
#
# # for (cost_index in 1:10) {
print(rbind(fpsn.models$allCost[,30], mycost[,30]))
# # }
#dynamic to find all the position for each segments
enum.choose <- function(x, k) {
if(k > length(x)) stop('k > length(x)')
if(choose(length(x), k)==1){
list(as.vector(combn(x, k)))
} else {
cbn <- combn(x, k)
lapply(seq(ncol(cbn)), function(i) cbn[,i])
}
}
#find all possible combination for k segments
all_index <- function(x,k){
all_index.list <- list()
all_possible <- enum.choose(x,k)
for (i in 1:length(all_possible)) {
if(all_possible[[i]][1] == 1){
if(all_possible[[i]][length(all_possible[[i]])] != length(x)){
all_index.list[i] <- all_possible[i]
all_index.list[[i]][length(all_possible[[i]])+1] <- length(x)
}
}
else{
break
}
}
return(all_index.list)
}
#@data is a  vector of numeric data
#@N is a  maximum number of segments parameter (positive integer)
DYNPROG <- function(data,N){
#initializing matrix cost_mat, with nrow = max segments, ncol = number of data points.
cost_mat <- matrix(1, nrow = N, ncol = length(data))
#Begin by filling in the first row with the optimal cost values for the models with one segment
Q1 <- cumsum(data^2)
S1 <- cumsum(data)
cost_mat[1,] <- Q1- S1^2/seq_along(data)
x <- seq(1,length(data),1)
for (row_index in 2:N) {
all_index.list <- all_index(x, row_index)
#remove all the null value in the list
all_index.list <- Filter(Negate(function(x) is.null(unlist(x))), all_index.list)
best_cost_mat = NULL
for(seg_index in 1: length(all_index.list)){
t <- 0
for (position in 1:row_index) {
left <- all_index.list[[seg_index]][position]
right <- all_index.list[[seg_index]][position+1]
if(right == length(data)){
right <- all_index.list[[seg_index]][position+1]
}
else{
right <- all_index.list[[seg_index]][position+1]-1
}
data.segments <- data[left:right]
Q <- cumsum(data.segments^2)
S <- cumsum(data.segments)
cost_mat[row_index, left:right] <- abs(Q- S^2/seq_along(data.segments))
# cost_mat[row_index, left:right] <- sum((mean(data.segments)-data.segments)^2)
if(row_index > 1) {
cost_mat[row_index, left:right] <- cost_mat[row_index -1, left:right] - length(data.segments)*2*cost_mat[row_index, left:right]*(row_index-1)
}
}
}
if(is.null(best_cost_mat)){
best_cost_mat <- cost_mat[row_index, ]
}
if(mean(best_cost_mat) > mean(cost_mat[row_index, ])){
best_cost_mat <- cost_mat[row_index, ]
}
cost_mat[row_index, ] <- best_cost_mat
}
# for (r in 2:N) {
#   cost_mat[r,] <- abs(cost_mat[r-1,]-cost_mat[r,]*(length(data)/r))
# }
return(cost_mat)
}
d <- sdt1$logratio[1:30]
fpsn.models <- jointseg::Fpsn(d, 5)
mycost <- DYNPROG(d,5)
#
# # for (cost_index in 1:10) {
print(rbind(fpsn.models$allCost[,30], mycost[,30]))
# # }
#dynamic to find all the position for each segments
enum.choose <- function(x, k) {
if(k > length(x)) stop('k > length(x)')
if(choose(length(x), k)==1){
list(as.vector(combn(x, k)))
} else {
cbn <- combn(x, k)
lapply(seq(ncol(cbn)), function(i) cbn[,i])
}
}
#find all possible combination for k segments
all_index <- function(x,k){
all_index.list <- list()
all_possible <- enum.choose(x,k)
for (i in 1:length(all_possible)) {
if(all_possible[[i]][1] == 1){
if(all_possible[[i]][length(all_possible[[i]])] != length(x)){
all_index.list[i] <- all_possible[i]
all_index.list[[i]][length(all_possible[[i]])+1] <- length(x)
}
}
else{
break
}
}
return(all_index.list)
}
#@data is a  vector of numeric data
#@N is a  maximum number of segments parameter (positive integer)
DYNPROG <- function(data,N){
#initializing matrix cost_mat, with nrow = max segments, ncol = number of data points.
cost_mat <- matrix(1, nrow = N, ncol = length(data))
#Begin by filling in the first row with the optimal cost values for the models with one segment
Q1 <- cumsum(data^2)
S1 <- cumsum(data)
cost_mat[1,] <- Q1- S1^2/seq_along(data)
x <- seq(1,length(data),1)
for (row_index in 2:N) {
all_index.list <- all_index(x, row_index)
#remove all the null value in the list
all_index.list <- Filter(Negate(function(x) is.null(unlist(x))), all_index.list)
best_cost_mat = NULL
for(seg_index in 1: length(all_index.list)){
t <- 0
for (position in 1:row_index) {
left <- all_index.list[[seg_index]][position]
right <- all_index.list[[seg_index]][position+1]
if(right == length(data)){
right <- all_index.list[[seg_index]][position+1]
}
else{
right <- all_index.list[[seg_index]][position+1]-1
}
data.segments <- data[left:right]
Q <- cumsum(data.segments^2)
S <- cumsum(data.segments)
cost_mat[row_index, left:right] <- abs(Q- S^2/seq_along(data.segments))
# cost_mat[row_index, left:right] <- sum((mean(data.segments)-data.segments)^2)
if(row_index > 1) {
cost_mat[row_index, left:right] <- cost_mat[row_index -1, left:right] - length(data.segments)^2*2*cost_mat[row_index, left:right]*(row_index-1)
}
}
}
if(is.null(best_cost_mat)){
best_cost_mat <- cost_mat[row_index, ]
}
if(mean(best_cost_mat) > mean(cost_mat[row_index, ])){
best_cost_mat <- cost_mat[row_index, ]
}
cost_mat[row_index, ] <- best_cost_mat
}
# for (r in 2:N) {
#   cost_mat[r,] <- abs(cost_mat[r-1,]-cost_mat[r,]*(length(data)/r))
# }
return(cost_mat)
}
d <- sdt1$logratio[1:30]
fpsn.models <- jointseg::Fpsn(d, 5)
mycost <- DYNPROG(d,5)
#
# # for (cost_index in 1:10) {
print(rbind(fpsn.models$allCost[,30], mycost[,30]))
# # }
#dynamic to find all the position for each segments
enum.choose <- function(x, k) {
if(k > length(x)) stop('k > length(x)')
if(choose(length(x), k)==1){
list(as.vector(combn(x, k)))
} else {
cbn <- combn(x, k)
lapply(seq(ncol(cbn)), function(i) cbn[,i])
}
}
#find all possible combination for k segments
all_index <- function(x,k){
all_index.list <- list()
all_possible <- enum.choose(x,k)
for (i in 1:length(all_possible)) {
if(all_possible[[i]][1] == 1){
if(all_possible[[i]][length(all_possible[[i]])] != length(x)){
all_index.list[i] <- all_possible[i]
all_index.list[[i]][length(all_possible[[i]])+1] <- length(x)
}
}
else{
break
}
}
return(all_index.list)
}
#@data is a  vector of numeric data
#@N is a  maximum number of segments parameter (positive integer)
DYNPROG <- function(data,N){
#initializing matrix cost_mat, with nrow = max segments, ncol = number of data points.
cost_mat <- matrix(1, nrow = N, ncol = length(data))
#Begin by filling in the first row with the optimal cost values for the models with one segment
Q1 <- cumsum(data^2)
S1 <- cumsum(data)
cost_mat[1,] <- Q1- S1^2/seq_along(data)
x <- seq(1,length(data),1)
for (row_index in 2:N) {
all_index.list <- all_index(x, row_index)
#remove all the null value in the list
all_index.list <- Filter(Negate(function(x) is.null(unlist(x))), all_index.list)
best_cost_mat = NULL
for(seg_index in 1: length(all_index.list)){
t <- 0
for (position in 1:row_index) {
left <- all_index.list[[seg_index]][position]
right <- all_index.list[[seg_index]][position+1]
if(right == length(data)){
right <- all_index.list[[seg_index]][position+1]
}
else{
right <- all_index.list[[seg_index]][position+1]-1
}
data.segments <- data[left:right]
Q <- cumsum(data.segments^2)
S <- cumsum(data.segments)
cost_mat[row_index, left:right] <- abs(Q- S^2/seq_along(data.segments))
# cost_mat[row_index, left:right] <- sum((mean(data.segments)-data.segments)^2)
if(row_index > 1) {
cost_mat[row_index, left:right] <- cost_mat[row_index -1, left:right] - length(data.segments)^2*1.5*cost_mat[row_index, left:right]*(row_index-1)
}
}
}
if(is.null(best_cost_mat)){
best_cost_mat <- cost_mat[row_index, ]
}
if(mean(best_cost_mat) > mean(cost_mat[row_index, ])){
best_cost_mat <- cost_mat[row_index, ]
}
cost_mat[row_index, ] <- best_cost_mat
}
# for (r in 2:N) {
#   cost_mat[r,] <- abs(cost_mat[r-1,]-cost_mat[r,]*(length(data)/r))
# }
return(cost_mat)
}
d <- sdt1$logratio[1:30]
fpsn.models <- jointseg::Fpsn(d, 5)
mycost <- DYNPROG(d,5)
#
# # for (cost_index in 1:10) {
print(rbind(fpsn.models$allCost[,30], mycost[,30]))
# # }
library(data.table)
library(ggplot2)
library(microbenchmark)
# use data.table::fread to read the compressed CSV data file into R as a data table.
dt_signals<- fread("data-for-LOPART-signals.csv.gz")
df_signals<-as.matrix(dt_signals)
head(sort(table(dt_signals[["sequenceID"]])))
tail(sort(table(dt_signals[["sequenceID"]])))
dt_labels<- fread("data-for-LOPART-labels.csv.gz")
df_labels<-as.matrix(dt_labels)
head(sort(table(dt_labels[["sequenceID"]])))
tail(sort(table(dt_labels[["sequenceID"]])))
max.segments <- 20
sdt1 <- subset(dt_signals, sequenceID == "20167.22")
binseg.models <- binsegRcpp::binseg_normal(sdt1$logratio, max.segments)
optimal.models <- jointseg::Fpsn(sdt1$logratio, max.segments)
loss.dt.list <- list()
algo <- c('binseg','Fpsn')
for (name in algo) {
if(name == 'binseg'){
loss.list <- binseg.models$loss
for (index in 1: max.segments) {
loss <- loss.list[index]
loss.dt.list[[paste(loss, name, index)]] <- data.table(loss, name,index)
}
}
if(name == 'Fpsn'){
loss.list <- optimal.models$J.est
for (index in 1: max.segments) {
loss <- loss.list[index]
loss.dt.list[[paste(loss, name, index)]] <- data.table(loss, name, index)
}
}
}
loss.dt <- do.call(rbind, loss.dt.list)
ggplot()+
geom_line(aes(index, loss, color=name),data=loss.dt) +
labs(x = "the number of segments", y ="the value of loss")
n_segment <-4
segs.dt.list <- list()
for(n.segs in 1:max.segments){
end <- optimal.models$t.est[n.segs, 1:n.segs]
start <- c(1, end[-length(end)]+1)
segs.dt.list[[paste(n.segs)]] <- data.table(start, end)[, .(
segments=n.segs,
mean=mean(sdt1$logratio[start:end]),
algorithm="DP"
), by=.(start, end)]
}
segs.dt.list$binseg <- data.table(coef(binseg.models), algorithm="BinSeg")
segs.dt <- do.call(rbind, segs.dt.list)
segs.dt <- do.call(rbind, segs.dt.list)
for(col.name in c("start", "end")){
col.value <- segs.dt[[col.name]]
set(segs.dt, j=paste0(col.name, ".pos"),
value=sdt1$position[col.value])
}
segs.dt[, end.before := c(NA, end[-.N]), by=.(algorithm, segments) ]
change.dt <- data.table(sdt1, segs.dt[1 < start])
change.dt[, changepoint := (start+end.before)/2]
sunb.segs.dt <- subset(segs.dt,segs.dt$segments==n_segment)
sub.change.dt <- subset(change.dt, change.dt$segments==n_segment)
gg <- ggplot()+
geom_point(aes(x=data.i, y=logratio), data=sdt1)
(gg.models <- gg+
facet_grid(algorithm ~ .)+
geom_segment(aes(
x=start, y=mean,
xend=end, yend=mean,
color=algorithm, size=algorithm),
data=sunb.segs.dt)+
geom_vline(aes(
xintercept=changepoint,
color=algorithm, size=algorithm),
data=sub.change.dt))+
scale_size_manual(values=c(DP=2, BinSeg=1))
t.dt.list <- list()
for(size in seq(10,length(sdt1$logratio),10)){
t <-   microbenchmark(
changepoint::cpt.mean(sdt1$logratio[1:size],Q=5, method= 'BinSeg', penalty= 'Manual'),
jointseg::Fpsn(sdt1$logratio[1:size], 5),
times = 100
)
algorithm <- 'cpt'
seconds <- summary(t)$mean[1]
t.dt.list[[paste(size, seconds , algorithm)]] <- data.table(size,seconds,algorithm)
algorithm <- 'Fpsn'
seconds <- summary(t)$mean[2]
t.dt.list[[paste(size, seconds , algorithm)]] <- data.table(size,seconds,algorithm)
}
t.dt <- do.call(rbind, t.dt.list)
ggplot()+
geom_line(aes(
size, seconds, color=algorithm),
data=t.dt)
#dynamic to find all the position for each segments
enum.choose <- function(x, k) {
if(k > length(x)) stop('k > length(x)')
if(choose(length(x), k)==1){
list(as.vector(combn(x, k)))
} else {
cbn <- combn(x, k)
lapply(seq(ncol(cbn)), function(i) cbn[,i])
}
}
#find all possible combination for k segments
all_index <- function(x,k){
all_index.list <- list()
all_possible <- enum.choose(x,k)
for (i in 1:length(all_possible)) {
if(all_possible[[i]][1] == 1){
if(all_possible[[i]][length(all_possible[[i]])] != length(x)){
all_index.list[i] <- all_possible[i]
all_index.list[[i]][length(all_possible[[i]])+1] <- length(x)
}
}
else{
break
}
}
return(all_index.list)
}
#@data is a  vector of numeric data
#@N is a  maximum number of segments parameter (positive integer)
DYNPROG <- function(data,N){
#initializing matrix cost_mat, with nrow = max segments, ncol = number of data points.
cost_mat <- matrix(1, nrow = N, ncol = length(data))
#Begin by filling in the first row with the optimal cost values for the models with one segment
Q1 <- cumsum(data^2)
S1 <- cumsum(data)
cost_mat[1,] <- Q1- S1^2/seq_along(data)
x <- seq(1,length(data),1)
for (row_index in 2:N) {
all_index.list <- all_index(x, row_index)
#remove all the null value in the list
all_index.list <- Filter(Negate(function(x) is.null(unlist(x))), all_index.list)
best_cost_mat = NULL
for(seg_index in 1: length(all_index.list)){
t <- 0
for (position in 1:row_index) {
left <- all_index.list[[seg_index]][position]
right <- all_index.list[[seg_index]][position+1]
if(right == length(data)){
right <- all_index.list[[seg_index]][position+1]
}
else{
right <- all_index.list[[seg_index]][position+1]-1
}
data.segments <- data[left:right]
Q <- cumsum(data.segments^2)
S <- cumsum(data.segments)
cost_mat[row_index, left:right] <- abs(Q- S^2/seq_along(data.segments))
# cost_mat[row_index, left:right] <- sum((mean(data.segments)-data.segments)^2)
if(row_index > 1) {
cost_mat[row_index, left:right] <- cost_mat[row_index -1, left:right] - length(data.segments)^2*1.5*cost_mat[row_index, left:right]*(row_index-1)
}
}
}
if(is.null(best_cost_mat)){
best_cost_mat <- cost_mat[row_index, ]
}
if(mean(best_cost_mat) > mean(cost_mat[row_index, ])){
best_cost_mat <- cost_mat[row_index, ]
}
cost_mat[row_index, ] <- best_cost_mat
}
# for (r in 2:N) {
#   cost_mat[r,] <- abs(cost_mat[r-1,]-cost_mat[r,]*(length(data)/r))
# }
return(cost_mat)
}
d <- sdt1$logratio[1:100]
fpsn.models <- jointseg::Fpsn(d, 10)
mycost <- DYNPROG(d,10)
d <- sdt1$logratio[1:50]
fpsn.models <- jointseg::Fpsn(d, 10)
mycost <- DYNPROG(d,10)
