library(base)
#if didn't find file, download it
if(!file.exists("zip.test.gz")){
download.file(
"https://web.stanford.edu/~hastie/ElemStatLearn/datasets/zip.test.gz",
"zip.test.gz"
)
}
#if we didn't install data.table package, we install it
if(FALSE){
install.packages("data.table")
}
#if we didn't install stats package, we install it
if(FALSE){
install.packages("stats")
}
#if we didn't install mclust package, we install it
if(FALSE){
install.packages("mclust")
}
#if we didn't install data.table package, we install it
if(FALSE){
install.packages("data.table")
}
library(stats)
library(ggplot2)
library(mclust)
library(data.table)
library(base)
# use data.table::fread to read the compressed CSV data file into R as a data table.
dt<- read.table("zip.test.gz")
#Convert the data table to a numeric matrix
temp <- as.matrix(dt)
#To exclude the label column (that is the first column)
df<-temp[,-1]
str(df)
#calculate the distance between two points
Eudist<-function(x,y){
distance<-sqrt(sum((x-y)^2))
return (distance)
}
KMEANS <-function(data.matrix = NA, K=NA){
if(is.na(dataset) || is.na(k)){
stop("You must input valid parameters!!")
}
rows.dataset<-nrow(dataset)
continue=TRUE
#Start by taking K random data points as the initial K cluster centers
initPoint<-dataset[sample.int(rows.dataset,size = k),]
formerPoint<-initPoint
iterPoint<-matrix(0,nrow = k,ncol = ncol(dataset))
#calcualte the distcance between each point to every class
distance.matrix<-matrix(0,nrow=rows.dataset,ncol=k)
while (continue) {
#calculate each point should belong to which class or cluster
cluster.matrix<-matrix(0,nrow=rows.dataset,ncol=k)
#calculate the distance between the current points to original points
for(i in 1:rows.dataset){
for (j in 1:k) {
distance.matrix[i,j]<-Eudist(dataset[i,],formerPoint[j,])
}
}
#identify each point
for(i in 1:rows.dataset){
cluster.matrix[i,which.min(distance.matrix[i,])]<-1
}
#update the center points
for(i in 1:k){
iterPoint[i,]<-apply(dataset[which(cluster.matrix[,i] == 1),],2,"mean")
}
all.true<-c()
#check the current center is
for(i in 1:k){
if(all(formerPoint[i,] == iterPoint[i,]) == T){
all.true[i]<-TRUE
}
}
formerPoint = iterPoint
continue.change=ifelse(all(all.true) == T,F,T)
}
colnames(iterPoint)<-colnames(dataset)
outcome=list()
outcome[["centers"]]<-iterPoint
outcome[["distance"]]<-distance.matrix
outcome[["cluster"]]<-rep(1,rows.dataset)
for(i in 1:rows.dataset){
out[["cluster"]][i]<-which(cluster.matrix[i,] == 1)
}
return (outcome)
}
outcome <- KMEANS <-function(df,10)
#calculate the distance between two points
Eudist<-function(x,y){
distance<-sqrt(sum((x-y)^2))
return (distance)
}
KMEANS <-function(data.matrix = NA, K=NA){
if(is.na(dataset) || is.na(k)){
stop("You must input valid parameters!!")
}
rows.dataset<-nrow(dataset)
continue=TRUE
#Start by taking K random data points as the initial K cluster centers
initPoint<-dataset[sample.int(rows.dataset,size = k),]
formerPoint<-initPoint
iterPoint<-matrix(0,nrow = k,ncol = ncol(dataset))
#calcualte the distcance between each point to every class
distance.matrix<-matrix(0,nrow=rows.dataset,ncol=k)
while (continue) {
#calculate each point should belong to which class or cluster
cluster.matrix<-matrix(0,nrow=rows.dataset,ncol=k)
#calculate the distance between the current points to original points
for(i in 1:rows.dataset){
for (j in 1:k) {
distance.matrix[i,j]<-Eudist(dataset[i,],formerPoint[j,])
}
}
#identify each point
for(i in 1:rows.dataset){
cluster.matrix[i,which.min(distance.matrix[i,])]<-1
}
#update the center points
for(i in 1:k){
iterPoint[i,]<-apply(dataset[which(cluster.matrix[,i] == 1),],2,"mean")
}
all.true<-c()
#check the current center is
for(i in 1:k){
if(all(formerPoint[i,] == iterPoint[i,]) == T){
all.true[i]<-TRUE
}
}
formerPoint = iterPoint
continue.change=ifelse(all(all.true) == T,F,T)
}
colnames(iterPoint)<-colnames(dataset)
outcome=list()
outcome[["centers"]]<-iterPoint
outcome[["distance"]]<-distance.matrix
outcome[["cluster"]]<-rep(1,rows.dataset)
for(i in 1:rows.dataset){
out[["cluster"]][i]<-which(cluster.matrix[i,] == 1)
}
return (outcome)
}
outcome <- KMEANS(df,10)
#if didn't find file, download it
if(!file.exists("zip.test.gz")){
download.file(
"https://web.stanford.edu/~hastie/ElemStatLearn/datasets/zip.test.gz",
"zip.test.gz"
)
}
#if we didn't install data.table package, we install it
if(FALSE){
install.packages("data.table")
}
#if we didn't install stats package, we install it
if(FALSE){
install.packages("stats")
}
#if we didn't install mclust package, we install it
if(FALSE){
install.packages("mclust")
}
#if we didn't install data.table package, we install it
if(FALSE){
install.packages("data.table")
}
library(stats)
library(ggplot2)
library(mclust)
library(data.table)
library(base)
# use data.table::fread to read the compressed CSV data file into R as a data table.
dt<- read.table("zip.test.gz")
#Convert the data table to a numeric matrix
temp <- as.matrix(dt)
#To exclude the label column (that is the first column)
df<-temp[,-1]
str(df)
#calculate the distance between two points
Eudist<-function(x,y){
distance<-sqrt(sum((x-y)^2))
return (distance)
}
KMEANS <-function(data.matrix = NA, K=NA){
if(is.na(data.matrix) || is.na(k)){
stop("You must input valid parameters!!")
}
rows.data.matrix<-nrow(data.matrix)
continue=TRUE
#Start by taking K random data points as the initial K cluster centers
initPoint<-data.matrix[sample.int(rows.data.matrix,size = k),]
formerPoint<-initPoint
iterPoint<-matrix(0,nrow = k,ncol = ncol(data.matrix))
#calcualte the distcance between each point to every class
distance.matrix<-matrix(0,nrow=rows.data.matrix,ncol=k)
while (continue) {
#calculate each point should belong to which class or cluster
cluster.matrix<-matrix(0,nrow=rows.data.matrix,ncol=k)
#calculate the distance between the current points to original points
for(i in 1:rows.data.matrix){
for (j in 1:k) {
distance.matrix[i,j]<-Eudist(data.matrix[i,],formerPoint[j,])
}
}
#identify each point
for(i in 1:rows.data.matrix){
cluster.matrix[i,which.min(distance.matrix[i,])]<-1
}
#update the center points
for(i in 1:k){
iterPoint[i,]<-apply(data.matrix[which(cluster.matrix[,i] == 1),],2,"mean")
}
all.true<-c()
#check the current center is
for(i in 1:k){
if(all(formerPoint[i,] == iterPoint[i,]) == T){
all.true[i]<-TRUE
}
}
formerPoint = iterPoint
continue.change=ifelse(all(all.true) == T,F,T)
}
colnames(iterPoint)<-colnames(data.matrix)
outcome=list()
outcome[["centers"]]<-iterPoint
outcome[["distance"]]<-distance.matrix
outcome[["cluster"]]<-rep(1,rows.data.matrix)
for(i in 1:rows.data.matrix){
out[["cluster"]][i]<-which(cluster.matrix[i,] == 1)
}
return (outcome)
}
outcome <- KMEANS(df,10)
#calculate the distance between two points
Eudist<-function(x,y){
distance<-sqrt(sum((x-y)^2))
return (distance)
}
KMEANS <-function(data.matrix = NA, K=NA){
if(is.na(data.matrix) || is.na(k)){
stop("You must input valid parameters!!")
}
rows.data.matrix<-nrow(data.matrix)
continue=TRUE
#Start by taking K random data points as the initial K cluster centers
initPoint<-data.matrix[sample.int(rows.data.matrix,size = k),]
formerPoint<-initPoint
iterPoint<-matrix(0,nrow = k,ncol = ncol(data.matrix))
#calcualte the distcance between each point to every class
distance.matrix<-matrix(0,nrow=rows.data.matrix,ncol=k)
while (continue) {
#calculate each point should belong to which class or cluster
cluster.matrix<-matrix(0,nrow=rows.data.matrix,ncol=k)
#calculate the distance between the current points to original points
for(i in 1:rows.data.matrix){
for (j in 1:k) {
distance.matrix[i,j]<-Eudist(data.matrix[i,],formerPoint[j,])
}
}
#identify each point
for(i in 1:rows.data.matrix){
cluster.matrix[i,which.min(distance.matrix[i,])]<-1
}
#update the center points
for(i in 1:k){
iterPoint[i,]<-apply(data.matrix[which(cluster.matrix[,i] == 1),],2,"mean")
}
all.true<-c()
#check the current center is
for(i in 1:k){
if(all(formerPoint[i,] == iterPoint[i,]) == T){
all.true[i]<-TRUE
}
}
formerPoint = iterPoint
continue.change=ifelse(all(all.true) == T,F,T)
}
colnames(iterPoint)<-colnames(data.matrix)
outcome=list()
outcome[["centers"]]<-iterPoint
outcome[["distance"]]<-distance.matrix
outcome[["cluster"]]<-rep(1,rows.data.matrix)
for(i in 1:rows.data.matrix){
out[["cluster"]][i]<-which(cluster.matrix[i,] == 1)
}
return (outcome)
}
outcome <- KMEANS(df,10)
#calculate the distance between two points
Eudist<-function(x,y){
distance<-sqrt(sum((x-y)^2))
return (distance)
}
KMEANS <-function(data.matrix = NA, K=NA){
if(is.na(data.matrix) || is.na(k)){
stop("You must input valid parameters!!")
}
rows.data.matrix<-nrow(data.matrix)
continue=TRUE
#Start by taking K random data points as the initial K cluster centers
initPoint<-data.matrix[sample.int(rows.data.matrix,size = K),]
formerPoint<-initPoint
iterPoint<-matrix(0,nrow = K,ncol = ncol(data.matrix))
#calcualte the distcance between each point to every class
distance.matrix<-matrix(0,nrow=rows.data.matrix,ncol=K)
while (continue) {
#calculate each point should belong to which class or cluster
cluster.matrix<-matrix(0,nrow=rows.data.matrix,ncol=K)
#calculate the distance between the current points to original points
for(i in 1:rows.data.matrix){
for (j in 1:K) {
distance.matrix[i,j]<-Eudist(data.matrix[i,],formerPoint[j,])
}
}
#identify each point
for(i in 1:rows.data.matrix){
cluster.matrix[i,which.min(distance.matrix[i,])]<-1
}
#update the center points
for(i in 1:K){
iterPoint[i,]<-apply(data.matrix[which(cluster.matrix[,i] == 1),],2,"mean")
}
all.true<-c()
#check the current center is
for(i in 1:K){
if(all(formerPoint[i,] == iterPoint[i,]) == T){
all.true[i]<-TRUE
}
}
formerPoint = iterPoint
continue.change=ifelse(all(all.true) == T,F,T)
}
colnames(iterPoint)<-colnames(data.matrix)
outcome=list()
outcome[["centers"]]<-iterPoint
outcome[["distance"]]<-distance.matrix
outcome[["cluster"]]<-rep(1,rows.data.matrix)
for(i in 1:rows.data.matrix){
out[["cluster"]][i]<-which(cluster.matrix[i,] == 1)
}
return (outcome)
}
outcome <- KMEANS(df,10)
#calculate the distance between two points
Eudist<-function(x,y){
distance<-sqrt(sum((x-y)^2))
return (distance)
}
KMEANS <-function(data.matrix = NA, K=NA){
if(is.na(data.matrix) || is.na(k)){
stop("You must input valid parameters!!")
}
rows.data.matrix<-nrow(data.matrix)
continue=TRUE
#Start by taking K random data points as the initial K cluster centers
initPoint<-data.matrix[sample.int(rows.data.matrix,size = K),]
formerPoint<-initPoint
iterPoint<-matrix(0,nrow = K,ncol = ncol(data.matrix))
#calcualte the distcance between each point to every class
distance.matrix<-matrix(0,nrow=rows.data.matrix,ncol=K)
while (continue) {
#calculate each point should belong to which class or cluster
cluster.matrix<-matrix(0,nrow=rows.data.matrix,ncol=K)
#calculate the distance between the current points to original points
for(i in 1:rows.data.matrix){
for (j in 1:K) {
distance.matrix[i,j]<-Eudist(data.matrix[i,],formerPoint[j,])
}
}
#identify each point
for(i in 1:rows.data.matrix){
cluster.matrix[i,which.min(distance.matrix[i,])]<-1
}
#update the center points
for(i in 1:K){
iterPoint[i,]<-apply(data.matrix[which(cluster.matrix[,i] == 1),],2,"mean")
}
all.true<-c()
#check the current center is
for(i in 1:K){
if(all(formerPoint[i,] == iterPoint[i,]) == T){
all.true[i]<-TRUE
}
}
formerPoint = iterPoint
continue.change=ifelse(all(all.true) == T,F,T)
}
colnames(iterPoint)<-colnames(data.matrix)
outcome=list()
outcome[["centers"]]<-iterPoint
outcome[["distance"]]<-distance.matrix
outcome[["cluster"]]<-rep(1,rows.data.matrix)
for(i in 1:rows.data.matrix){
out[["cluster"]][i]<-which(cluster.matrix[i,] == 1)
}
return (outcome)
}
KEMANS(df,10)
#calculate the distance between two points
Eudist<-function(x,y){
distance<-sqrt(sum((x-y)^2))
return (distance)
}
KMEANS <-function(data.matrix = NA, K=NA){
if(is.na(data.matrix) || is.na(k)){
stop("You must input valid parameters!!")
}
rows.data.matrix<-nrow(data.matrix)
continue=TRUE
#Start by taking K random data points as the initial K cluster centers
initPoint<-data.matrix[sample.int(rows.data.matrix,size = K),]
formerPoint<-initPoint
iterPoint<-matrix(0,nrow = K,ncol = ncol(data.matrix))
#calcualte the distcance between each point to every class
distance.matrix<-matrix(0,nrow=rows.data.matrix,ncol=K)
while (continue) {
#calculate each point should belong to which class or cluster
cluster.matrix<-matrix(0,nrow=rows.data.matrix,ncol=K)
#calculate the distance between the current points to original points
for(i in 1:rows.data.matrix){
for (j in 1:K) {
distance.matrix[i,j]<-Eudist(data.matrix[i,],formerPoint[j,])
}
}
#identify each point
for(i in 1:rows.data.matrix){
cluster.matrix[i,which.min(distance.matrix[i,])]<-1
}
#update the center points
for(i in 1:K){
iterPoint[i,]<-apply(data.matrix[which(cluster.matrix[,i] == 1),],2,"mean")
}
all.true<-c()
#check the current center is
for(i in 1:K){
if(all(formerPoint[i,] == iterPoint[i,]) == T){
all.true[i]<-TRUE
}
}
formerPoint = iterPoint
continue.change=ifelse(all(all.true) == T,F,T)
}
colnames(iterPoint)<-colnames(data.matrix)
outcome=list()
outcome[["centers"]]<-iterPoint
outcome[["distance"]]<-distance.matrix
outcome[["cluster"]]<-rep(1,rows.data.matrix)
for(i in 1:rows.data.matrix){
out[["cluster"]][i]<-which(cluster.matrix[i,] == 1)
}
return (outcome)
}
KEMANS(df,10)
KMEANS(df,10)
#calculate the distance between two points
Eudist<-function(x,y){
distance<-sqrt(sum((x-y)^2))
return (distance)
}
KMEANS <-function(data.matrix = NA, K=NA){
if(is.na(data.matrix) || is.na(K)){
stop("You must input valid parameters!!")
}
rows.data.matrix<-nrow(data.matrix)
continue=TRUE
#Start by taking K random data points as the initial K cluster centers
initPoint<-data.matrix[sample.int(rows.data.matrix,size = K),]
formerPoint<-initPoint
iterPoint<-matrix(0,nrow = K,ncol = ncol(data.matrix))
#calcualte the distcance between each point to every class
distance.matrix<-matrix(0,nrow=rows.data.matrix,ncol=K)
while (continue) {
#calculate each point should belong to which class or cluster
cluster.matrix<-matrix(0,nrow=rows.data.matrix,ncol=K)
#calculate the distance between the current points to original points
for(i in 1:rows.data.matrix){
for (j in 1:K) {
distance.matrix[i,j]<-Eudist(data.matrix[i,],formerPoint[j,])
}
}
#identify each point
for(i in 1:rows.data.matrix){
cluster.matrix[i,which.min(distance.matrix[i,])]<-1
}
#update the center points
for(i in 1:K){
iterPoint[i,]<-apply(data.matrix[which(cluster.matrix[,i] == 1),],2,"mean")
}
all.true<-c()
#check the current center is
for(i in 1:K){
if(all(formerPoint[i,] == iterPoint[i,]) == T){
all.true[i]<-TRUE
}
}
formerPoint = iterPoint
continue.change=ifelse(all(all.true) == T,F,T)
}
colnames(iterPoint)<-colnames(data.matrix)
outcome=list()
outcome[["centers"]]<-iterPoint
outcome[["distance"]]<-distance.matrix
outcome[["cluster"]]<-rep(1,rows.data.matrix)
for(i in 1:rows.data.matrix){
out[["cluster"]][i]<-which(cluster.matrix[i,] == 1)
}
return (outcome)
}
KMEANS(df,10)
