index_seq <- sort(unique(dt$V1))
for (index in index_seq) {
sub <- subset(dt, dt$V1 == index)
row.dt <- sub[sample(nrow(sub), 10),]
sub.dt <- rbind(sub.dt,row.dt)
}
n.input <- ncol(sub.dt)
n.code.units <- 1
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
model
compiled.model <- keras::compile(
model,
optimizer=keras::optimizer_sgd(),
loss=keras::loss_mean_squared_error)
i.mat <- as.matrix(sub.dt)
fit.model <- keras::fit(compiled.model, x=i.mat, y=i.mat)
fit.model[["metrics"]][["loss"]]
pred.mat <- predict(compiled.model, i.mat)#last layer.
pred.dt <- data.table(pred.mat)
names(pred.dt) <- names(sub.dt)
# code layer predictions.
intermediate_layer_model <- keras::keras_model(
inputs = compiled.model$input,
outputs = keras::get_layer(compiled.model, "code")$output)
intermediate_output <- predict(intermediate_layer_model, i.mat)
intermediate_output
# use data.table::fread to read the compressed CSV data file into R as a data table.
dt<- fread("zip.train.gz")
sub.dt <- data.table()
index_seq <- sort(unique(dt$V1))
for (index in index_seq) {
sub <- subset(dt, dt$V1 == index)
row.dt <- sub[sample(nrow(sub), 10),]
sub.dt <- rbind(sub.dt,row.dt)
}
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
model
compiled.model <- keras::compile(
model,
optimizer=keras::optimizer_sgd(),
loss=keras::loss_mean_squared_error)
i.mat <- as.matrix(sub.dt)
fit.model <- keras::fit(compiled.model, x=i.mat, y=i.mat)
fit.model[["metrics"]][["loss"]]
pred.mat <- predict(compiled.model, i.mat)#last layer.
pred.dt <- data.table(pred.mat)
names(pred.dt) <- names(sub.dt)
# code layer predictions.
intermediate_layer_model <- keras::keras_model(
inputs = compiled.model$input,
outputs = keras::get_layer(compiled.model, "code")$output)
intermediate_output <- predict(intermediate_layer_model, i.mat)
library(data.table)
i.df <- data.table(iris[, 2:3])
str(i.df)
gg <- ggplot()+
geom_point(aes(
y=Petal.Length, x=Sepal.Width, color=data.type),
data=data.table(i.df, data.type="data"))+
scale_color_manual(values=c(data="black", model="red"))+
coord_equal()
gg
pred.mat <- predict(compiled.model, i.mat)#last layer.
pred.dt <- data.table(pred.mat)
names(pred.dt) <- names(sub.dt)
pred.dt
sub.dt
View(pred.dt)
pred.dt
summary(model)
summary(fit.model)
fit.model[["metrics"]][["loss"]]
mse<-sum((pred.dt-sub.dt)^2)/length(sub.dt)
mse
length(sub.dt)
mse2 <- function(i, x_hat, x) {
sum((x_hat[i,] - x[i,])^2) / length(x[i,])
}
lapply(seq_len(nrow(x)), mse2, x_hat = pred.dt, x = sub.dt)
lapply(seq_len(nrow(sub.dt)), mse2, x_hat = pred.dt, x = sub.dt)
sum(lapply(seq_len(nrow(sub.dt)), mse2, x_hat = pred.dt, x = sub.dt))
mse<-sum((pred.dt-sub.dt)^2)/length(sub.dt)
length(sub.dt)
mse
install.packages("keras")
install.packages("keras")
keras::install_keras(version = "2.1.6", tensorflow = "1.5")
keras::use_implementation("keras")
keras::use_backend("tensorflow")
library(keras)
library(ggplot2)
library(data.table)
library(tidyverse)
# use data.table::fread to read the compressed CSV data file into R as a data table.
dt<- fread("zip.train.gz")
sub.dt <- data.table()
index_seq <- sort(unique(dt$V1))
for (index in index_seq) {
sub <- subset(dt, dt$V1 == index)
row.dt <- sub[sample(nrow(sub), 10),]
sub.dt <- rbind(sub.dt,row.dt)
}
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
summary(model)
summary(model)
compile.mse
#compute the predit value for  keras::compile  function
compiled.model <- keras::compile(
model,
optimizer=keras::optimizer_sgd(),
loss=keras::loss_mean_squared_error)
i.mat <- as.matrix(sub.dt)
compile.fit.model <- keras::fit(compiled.model, x=i.mat, y=i.mat)
compile.fit.model[["metrics"]][["loss"]]
compile.pred.mat <- predict(compiled.model, i.mat)#last layer.
compile.pred.dt <- data.table(compile.pred.mat)
names(compile.pred.dt) <- names(sub.dt)
#compute a PCA with rank=2 and compute its predicted values
pc.fit <- prcomp(sub.dt, rank = 2)
PC1 <- pc.fit[["rotation"]][,1]
PC1.mat <- matrix(PC1, nrow=nrow(sub.dt),  ncol=ncol(sub.dt), byrow=TRUE)
mean.vec <- colMeans(sub.dt)
mean.mat <- matrix(mean.vec, nrow=nrow(sub.dt),  ncol=ncol(sub.dt), byrow=TRUE)
pc.pred.mat <- mean.mat + PC1.mat * pc.fit[["x"]][, 1]
colnames(pc.pred.mat) <- colnames(sub.dt)
pc.pred.dt <- data.table(pc.pred.mat)
## sum of squared error.
compile.mse <- sum((compile.pred.mat - sub.dt)^2)
pca.mse <- sum((pc.pred.mat - sub.dt)^2)
compile.mse
pca.mse
compile.mse
pca.mse
install.packages("keras")
install.packages("keras")
install.packages("keras")
keras::install_keras()
keras::use_implementation("keras")
keras::use_backend("tensorflow")
library(keras)
library(ggplot2)
library(data.table)
library(tidyverse)
library(keras)
library(ggplot2)
library(data.table)
library(tidyverse)
# use data.table::fread to read the compressed CSV data file into R as a data table.
dt<- fread("zip.train.gz")
sub.dt <- data.table()
index_seq <- sort(unique(dt$V1))
for (index in index_seq) {
sub <- subset(dt, dt$V1 == index)
row.dt <- sub[sample(nrow(sub), 10),]
sub.dt <- rbind(sub.dt,row.dt)
}
# code layer predictions.
intermediate_layer_model <- keras::keras_model(
inputs = compiled.model$input,
outputs = keras::get_layer(compiled.model, "code")$output)
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
library(tensorflow)
#
install_tensorflow()
# code layer predictions.
intermediate_layer_model <- keras::keras_model(
inputs = compiled.model$input,
outputs = keras::get_layer(compiled.model, "code")$output)
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
devtools::install_github("rstudio/tensorflow")
devtools::install_github("rstudio/tensorflow", force = TRUE)
devtools::install_github("rstudio/tensorflow", force = TRUE)
devtools::install_github("rstudio/keras")
tensorflow::install_tensorflow()
tensorflow::tf_config()
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
install.packages("keras")
#
keras::install_keras()
install.packages("keras")
install.packages("keras")
keras::install_keras()
library(tensorflow)
#
install_tensorflow()
library(keras)
library(ggplot2)
library(data.table)
library(tidyverse)
# use data.table::fread to read the compressed CSV data file into R as a data table.
dt<- fread("zip.train.gz")
sub.dt <- data.table()
index_seq <- sort(unique(dt$V1))
for (index in index_seq) {
sub <- subset(dt, dt$V1 == index)
row.dt <- sub[sample(nrow(sub), 10),]
sub.dt <- rbind(sub.dt,row.dt)
}
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
library(tensorflow)
#
install_tensorflow()
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
keras::use_implementation("keras")
keras::use_backend("tensorflow")
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
keras::use_implementation("keras")
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
library(keras)
library(tensorflow)
keras::use_implementation("keras")
keras::use_backend("tensorflow")
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
library(reticulate)
conda_version()
conda_list()
conda_python(envname = "TF2R")
conda_install(envname = "TF2R",packages="r-reticulate")
conda_install(envname = "TF2R",packages="r-tensorflow")
conda_install(envname = "TF2R",packages="r-keras")
keras::use_implementation("keras")
keras::use_backend("tensorflow")
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
library(tensorflow)
#
install_tensorflow()
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
import tensorflow
library(tensorflow)
tf$constant("Hellow Tensorflow")
library(tensorflow)
install_tensorflow()
library(tensorflow)
tf$constant("Hellow Tensorflow")
if(FALSE){
install.packages("keras")
keras::install_keras(version = "2.1.6", tensorflow = "1.5")
}
keras::use_implementation("keras")
keras::use_backend("tensorflow")
library(keras)
library(ggplot2)
library(data.table)
library(tidyverse)
# use data.table::fread to read the compressed CSV data file into R as a data table.
dt<- fread("zip.train.gz")
sub.dt <- data.table()
index_seq <- sort(unique(dt$V1))
for (index in index_seq) {
sub <- subset(dt, dt$V1 == index)
row.dt <- sub[sample(nrow(sub), 10),]
sub.dt <- rbind(sub.dt,row.dt)
}
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
sudo apt install python3-pip
keras::install_keras(version = "2.1.6", tensorflow = "2.2")
install.packages("keras")
install.packages("keras")
install.packages("keras")
keras::install_keras(version = "2.1.6", tensorflow = "2.2")
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
library(keras)
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
install.packages("keras")
install.packages("keras")
install.packages("keras")
install.packages("keras")
install.packages("keras")
install.packages("keras")
keras::install_keras()
if(FALSE){
install.packages("keras")
keras::install_keras()
}
keras::use_implementation("keras")
keras::use_backend("tensorflow")
library(keras)
library(ggplot2)
library(data.table)
library(tidyverse)
# use data.table::fread to read the compressed CSV data file into R as a data table.
dt<- fread("zip.train.gz")
sub.dt <- data.table()
index_seq <- sort(unique(dt$V1))
for (index in index_seq) {
sub <- subset(dt, dt$V1 == index)
row.dt <- sub[sample(nrow(sub), 10),]
sub.dt <- rbind(sub.dt,row.dt)
}
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
if(FALSE){
install.packages("keras")
keras::install_keras()
}
keras::use_implementation("keras")
keras::use_backend("tensorflow")
library(keras)
library(ggplot2)
library(data.table)
library(tidyverse)
# use data.table::fread to read the compressed CSV data file into R as a data table.
dt<- fread("zip.train.gz")
sub.dt <- data.table()
index_seq <- sort(unique(dt$V1))
for (index in index_seq) {
sub <- subset(dt, dt$V1 == index)
row.dt <- sub[sample(nrow(sub), 10),]
sub.dt <- rbind(sub.dt,row.dt)
}
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
library(keras)
library(ggplot2)
library(data.table)
library(tidyverse)
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
install.packages("keras")
install.packages("keras")
install.packages("keras")
install.packages("keras")
keras::install_keras()
keras::use_implementation("keras")
keras::use_backend("tensorflow")
library(keras)
library(ggplot2)
library(data.table)
library(tidyverse)
# use data.table::fread to read the compressed CSV data file into R as a data table.
dt<- fread("zip.train.gz")
sub.dt <- data.table()
index_seq <- sort(unique(dt$V1))
for (index in index_seq) {
sub <- subset(dt, dt$V1 == index)
row.dt <- sub[sample(nrow(sub), 10),]
sub.dt <- rbind(sub.dt,row.dt)
}
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
install.packages("keras")
install.packages("keras")
install.packages("keras")
keras::install_keras()
keras::use_implementation("keras")
keras::use_backend("tensorflow")
library(keras)
library(ggplot2)
library(data.table)
library(tidyverse)
# use data.table::fread to read the compressed CSV data file into R as a data table.
dt<- fread("zip.train.gz")
sub.dt <- data.table()
index_seq <- sort(unique(dt$V1))
for (index in index_seq) {
sub <- subset(dt, dt$V1 == index)
row.dt <- sub[sample(nrow(sub), 10),]
sub.dt <- rbind(sub.dt,row.dt)
}
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
# use data.table::fread to read the compressed CSV data file into R as a data table.
n.input <- ncol(sub.dt)
n.code.units <- 2
model <- keras::keras_model_sequential() %>%
keras::layer_dense(
input_shape = n.input, units = n.code.units, name="code") %>%
keras::layer_dense(units = n.input)
